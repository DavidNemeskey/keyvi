import os, shutil, sys, datetime
Import('env') # exported by parent SConstruct


minor_version=datetime.datetime.today().strftime('%Y%m%d')

# Here's the core info for the package

DEBNAME = "keyvi"
DEBVERSION = "0.1"
DEBMAINT = "hendrik.muhs@gmail.com"
DEBARCH = "amd64"
DEBDEPENDS = "" # what are we dependent on?
DEBDESC = "keyvi a key/value index"

DEBFILES = [

    # Now we specify the files to be included in the .deb
    # Where they should go, and where they should be copied from.
    # If you have a lot of files, you may wish to generate this
    # list in some other way.
    ("usr/local/bin/keyvicompiler",             "#release/keyvicompiler/keyvicompiler"),
    ("usr/local/bin/keyviinspector",            "#release/keyviinspector/keyviinspector"),

]

# This is the debian package we're going to create
debpkg = '#%s_%s-%s_%s.deb' % (DEBNAME, DEBVERSION, minor_version, DEBARCH)

# and we want it to be built when we build 'debian'
env.Alias("debian", debpkg)

DEBCONTROLFILE = os.path.join("debian/control")

DEBCONTROLFILE_GEN = os.path.join(DEBNAME, "DEBIAN/control")


# This copies the necessary files into place into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
    # We put things in a directory named after the package
    dest = os.path.join(DEBNAME, f[0])
    # The .deb package will depend on this file
    env.Depends(debpkg, dest)
    # Copy from the the source tree.
    env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control file also depends on each source because we'd like
    # to know the total installed size of the package
    env.Depends(DEBCONTROLFILE, dest)

# Now to create the control file:

CONTROL_TEMPLATE = """
Source: %s
Maintainer: Hendrik <hendrik@cliqz.com>

Package: %s
Priority: extra
Section: misc
Architecture: %s
Depends: ${shlibs:Depends}, %s
Description: %s

"""
env.Depends(debpkg,DEBCONTROLFILE )

# The control file should be updated when the SVN version changes
env.Depends(DEBCONTROLFILE, env.Value(minor_version))

# This function creates the control file from the template and info
# specified above, and works out the final size of the package.
def make_control_template(target=None, source=None, env=None):
    control_info = CONTROL_TEMPLATE % (
        DEBNAME, DEBNAME, DEBARCH, DEBDEPENDS, DEBDESC)
    f = open(str(target[0]), 'w')
    f.write(control_info)
    f.close()

# We can generate the control file template by calling make_control template
env.Command(DEBCONTROLFILE, None, make_control_template)

shlib_deps = []
for binary in DEBFILES:
    shlib_deps.append(binary[1] + '_dep')
    env.Command(binary[1] + '_dep', os.path.join(DEBNAME, binary[0]), "cd deb && dpkg-shlibdeps -v ../$SOURCE")


env.Command(DEBCONTROLFILE_GEN, [DEBCONTROLFILE ]+ shlib_deps, "dpkg-gencontrol -v%s -ldeb/changelog -Pdeb/%s -cdeb/%s -fdeb/list -Tdeb/debian/substvars"
    % (DEBVERSION, DEBNAME, DEBCONTROLFILE))


# And we can generate the .deb file by calling dpkg-deb
env.Command(debpkg, DEBCONTROLFILE_GEN,
            "fakeroot dpkg-deb -b %s %s" % ("deb/%s" % DEBNAME, "$TARGET"))
