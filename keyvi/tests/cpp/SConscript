import glob
import os
import fnmatch

# recursive globing
def RecursiveGlob(pathname):
    matches = []
    for root, dirnames, filenames in os.walk(pathname):
        for filename in fnmatch.filter(filenames, '*.cpp'):
            matches.append(File(os.path.join(root, filename)))

    return matches

#get all the build variables we need
Import('env', 'project', 'buildmode', 'debugcompilerflags', 'releasecompilerflags', 'linklibraries')
localenv = env.Clone()

buildroot = '../../' + buildmode  #holds the root of the build directory tree
builddir = buildroot + '/' + project   #holds the build directory for this project
targetpath = builddir + '/' + project  #holds the path to the executable in the build directory

#append the user's additional compile flags
#assume debugcompilerflags and releasecompilerflags are defined
if buildmode == 'debug':
   localenv.Append(CPPFLAGS=debugcompilerflags)
else:
   localenv.Append(CPPFLAGS=releasecompilerflags)

localenv.Append(CPPPATH = ['../../src/cpp'])


#specify the build directory
localenv.VariantDir(builddir, ".", duplicate=0)

source = RecursiveGlob('.')
# the unit test executable
localenv.Program(target = targetpath, source=source, LIBS = ["boost_unit_test_framework"] + linklibraries)

